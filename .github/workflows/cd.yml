name: CD - Release Docker Image

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      reason:
        description: "Optional reason for manual run"
        required: false
        type: string
env:
  IMAGE_NAME: yandex-terraform
  REGISTRY: docker.io

jobs:
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.gitversion.outputs.semver }}
      is_release: "true"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "6.0.x"

      - name: Install GitVersion
        uses: gittools/actions/setup-gitversion@v0
        with:
          version-spec: "5.12.0"

      - name: Run GitVersion
        id: gitversion
        uses: gittools/actions/execute-gitversion@v0
        with:
          use-legacy-semver: false

  build-and-push:
    needs: determine-version
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.determine-version.outputs.version }}
            type=raw,value=latest
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
          labels: |
            org.opencontainers.image.version=${{ needs.determine-version.outputs.version }}
            org.opencontainers.image.source=${{ github.repository }}

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: BUILDKIT_INLINE_CACHE=1

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ needs.determine-version.outputs.version }}
          output: ${{ env.IMAGE_NAME }}-${{ needs.determine-version.outputs.version }}.spdx.json
          output-format: spdx-json

      - name: Upload SBOM as artifact
        uses: actions/upload-artifact@v3
        with:
          name: sbom-${{ needs.determine-version.outputs.version }}
          path: ${{ env.IMAGE_NAME }}-${{ needs.determine-version.outputs.version }}.spdx.json

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ needs.determine-version.outputs.version }}
          body: |
            Published Docker image:
            `${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ needs.determine-version.outputs.version }}`

            Includes SBOM (SPDX) attached.
          files: ${{ env.IMAGE_NAME }}-${{ needs.determine-version.outputs.version }}.spdx.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
